<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.5" created="2018-08-11 12:43" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>星辰</title>
	<link>http://118.24.67.39</link>
	<description>生命的全部的意义在于无穷地探索尚未知道的东西。</description>
	<pubDate>Sat, 11 Aug 2018 12:43:23 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://118.24.67.39</wp:base_site_url>
	<wp:base_blog_url>http://118.24.67.39</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[2282869995]]></wp:author_login><wp:author_email><![CDATA[2282869995@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[动情书生]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%bd%91%e7%bb%9c]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[网络]]></wp:cat_name>
	</wp:category>

	<generator>https://wordpress.org/?v=4.9.5</generator>

	<item>
		<title>OIS七层和TCP/IP 五层协议构架详解</title>
		<link>http://118.24.67.39/archives/123</link>
		<pubDate>Sat, 24 Feb 2018 06:22:30 +0000</pubDate>
		<dc:creator><![CDATA[2282869995]]></dc:creator>
		<guid isPermaLink="false">http://39.107.113.183/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[<p>---summary--- 开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为OSI模型（OSI model），一种概念模型，由过期标准组织（ISO）提出，一个试图使各种计算机在世界范围内互联为网络的标准框架。 --维基百科 ---summary---</p>

<table>
<thead>
<tr>
  <th>OSI中的层</th>
  <th>功能</th>
  <th>TCP/IP协议族</th>
</tr>
</thead>
<tbody>
<tr>
  <td>应用层</td>
  <td>文件传输/电子邮件/文件服务/虚拟终端</td>
  <td>TFTP,HTTP,SNMP TCP/IP,TFP,SMTP,DNS,Telnet</td>
</tr>
<tr>
  <td>表示层</td>
  <td>数据格式化,代码转换,数据加密</td>
  <td>没有协议</td>
</tr>
<tr>
  <td>会话层</td>
  <td>解除或建立与别的节点的联系</td>
  <td>没有协议</td>
</tr>
<tr>
  <td>传输层</td>
  <td>提供端对端的接口</td>
  <td>TCP UDP</td>
</tr>
<tr>
  <td>网络层</td>
  <td>为数据包选择路由</td>
  <td>IP, ICMP,RIP,OSPF,BGP,IGMP</td>
</tr>
<tr>
  <td>数据链路层</td>
  <td>传输有地址的帧以及错误检测功能</td>
  <td>SLIP,CSLIP,PPP,ARP,RARP,MTU</td>
</tr>
<tr>
  <td>物理层</td>
  <td>以二进制数据的形式在物理媒体上传输数据</td>
  <td>ISO2110,IEEE802,IEE802.2</td>
</tr>
</tbody>
</table>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date><![CDATA[2018-02-24 14:22:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-24 06:22:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ois%e4%b8%83%e5%b1%82%e5%92%8ctcp-ip-%e4%ba%94%e5%b1%82%e5%8d%8f%e8%ae%ae%e6%9e%84%e6%9e%b6%e8%af%a6%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c"><![CDATA[网络]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DNS域名解析</title>
		<link>http://118.24.67.39/archives/155</link>
		<pubDate>Sat, 24 Feb 2018 06:43:52 +0000</pubDate>
		<dc:creator><![CDATA[2282869995]]></dc:creator>
		<guid isPermaLink="false">http://39.107.113.183/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我们都知道互联网都是通过URL来发布和请求资源的，而URL中的域名是需要解析成IP地址才能与远程主机建立连接，如何将域名解析成IP地址就属于DNS的工作范畴。</p>

<p>可以毫不夸张的说，虽然我们平时上网感觉不到DNS解析的存在，但是一旦DNS解析出错，可能会导致严重的互联网灾难。目前世界上的整个互联网有几个DNS根域名服务器，任何一台服务器坏掉，后果都会非常严重。</p>

<h2>DNS域名解析过程</h2>

<p>当用户在浏览器中输入 www.abc.com时，DNS解析将会有将近10个步骤，这个过程答题描述如下：</p>

<ol>
<li>浏览器会检查缓存中有没有对应的解析过的IP地址。</li>
<li>如果用户浏览器缓存中没有，浏览器会查找操作系统缓存中是否有这个域名对应的DNS解析结果。</li>
<li>如果操作系统中没有，操作系统会把这个域名发送给系统里设置的LDNS，也就是本地区的域名服务器。</li>
<li>如果LDNS没有命中，就直接到 Root Server 域名服务器请求解析。</li>
<li>根域名服务器会返回给贝蒂域名服务器一个所查询域的主域名服务器（gTLD Server）地址，gTLD是国际顶级域名服务器，如.com、.cn、.org等，全球只有13台左右。</li>
<li>本地域名服务器（Local DNS Server）在向上一步返回的gTLD服务器发送请求。</li>
<li>接受请求的gTLD服务器查找并返回此域名对应的Name Server域名服务器地址，这个Name Server通常就是你注册的域名服务器，例如你在某个服务器提供上申请的域名，那么这个域名解析任务就由这个域名提供商的服务器来完成。</li>
<li>Name Server 域名服务器会查询存储的域名和IP的映射关系表，连同一个TTL值返回给DNS Server域名服务器。</li>
<li>返回该域名对应的IP和TTL值，Local NDS Server 会缓存这个域名和ip的对应关系，缓存的时间由TTL值控制。</li>
<li>把解析的结果返回给用户，用户根据TTL值缓存在本地系统缓存中，域名解析过程结束。</li>
</ol>

<p>在实际DNS解析过程中，可能还不止10个步骤，如Name Server 也可能有多级，或者有一个GTM来负责负载均衡，这都可能会影响域名解析的过程。</p>

<h2>域名解析类型</h2>

<p>域名解析记录主要分为 A 记录、MX记录、CNAME记录、NS记录和TXT记录。</p>

<ul>
<li>A 记录， A代表的是address，用来指定域名对应的IP地址，如将 item.taobao.com 指定到 115.112.111.22，A记录可以将多个域名解析到一个IP上，但是不能将一个域名解析到多个IP上。</li>
<li>MX 记录，表示的是Mail Exchange，即时可以将某个域名下的邮件服务器指向自己的MailServer。发邮件时DNS会将邮件发送到MX记录对应的地址，而正常通过Web请求的话仍然解析到A记录的IP地址。</li>
<li>CNAME 记录，全称是Canonical Name（别名解析）。所谓别名解析就是可以为一个域名设置一个或多个别名。如将a.com 解析到 b.com。</li>
<li>NS 记录，为某个域名指定DNS解析服务器，也就是这个域名有指定的IP地址的DNS服务器去解析。</li>
<li>TXT记录，为某个主机名或域名设置说明，如可以为 a.net设置TXT记录为“GMX的博客”这样的说明。</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[2018-02-24 14:43:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-24 06:43:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dns%e5%9f%9f%e5%90%8d%e8%a7%a3%e6%9e%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c"><![CDATA[网络]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CDN工作机制</title>
		<link>http://118.24.67.39/archives/157</link>
		<pubDate>Sat, 24 Feb 2018 06:44:18 +0000</pubDate>
		<dc:creator><![CDATA[2282869995]]></dc:creator>
		<guid isPermaLink="false">http://39.107.113.183/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[<p>CDN 也就是内容分布网络（Content Delivery Network），它是构筑在现有Internet上的一种先进的流量分配网络。其目的是通过在现有的Internet中增加一层新的网络构架，将网站的内容发布到最接近用户的网络“边缘”，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。有别于镜像，它比镜像更加智能，可以做一个这样的比喻： CDN=镜像（Nurrir）+缓存（Cache）+整体负载均衡（GSLB）。因而CDN可以明显提高Internet中的信息流动效率。</p>

<blockquote>
  <p>目前CDN都已缓存网站中的静态数据为主，如CSS，JS，图片和静态页面等数据。用户从主站服务器请求道动态内容后，再从CDN上下载这些静态数据，从而加速网页数据内容的下载速度，如淘宝有90%以上的数据都是有CDN来提供的。</p>
</blockquote>

<p>通常来说CDN要达到以下几个目标：
* 可扩展性
* 安全性
* 可靠性</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2018-02-24 14:44:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-24 06:44:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cdn%e5%b7%a5%e4%bd%9c%e6%9c%ba%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c"><![CDATA[网络]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>负载均衡</title>
		<link>http://118.24.67.39/archives/159</link>
		<pubDate>Sat, 24 Feb 2018 06:45:15 +0000</pubDate>
		<dc:creator><![CDATA[2282869995]]></dc:creator>
		<guid isPermaLink="false">http://39.107.113.183/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[<p>负载均衡（Load Bakabce）就是对工作任务进行平衡、分摊到多个操作单元上执行，如图片服务器、应用服务器等，共同完成工作任务。他可以提高服务器响应速度及利用效率。避免软件或硬件模块出现单点失效，解决网络拥塞问题，实现地理位置无关性，为用户提供较一致的访问质量。</p>

<p><strong>通常有三种负载均衡：</strong></p>

<ul>
<li>链路负载均衡。</li>
<li>集群负载均衡。</li>
<li>操作系统负载均衡。</li>
</ul>

<p>链路负载均衡也就是通过DNS解析成不同的IP，然后根据这个IP来访问不同的目标服务器。</p>

<p>集群负载均衡是一种常见的负载均衡方式，分为硬件负载均衡和软件负载均衡。其中软件负载均衡是使用最普遍的负载方式。他的特点是使用成本低，直接使用廉价的PC就可以搭建。缺点是一般一次访问请求要求经过多次迭代服务器，会增加网络延迟。</p>

<p>操作系统负载均衡，是利用操作系统级别的软件中断或硬件中断来达到负载均衡，如可以设置多列网卡等来实现。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2018-02-24 14:45:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-24 06:45:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c"><![CDATA[网络]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>http状态管理方案</title>
		<link>http://118.24.67.39/archives/275</link>
		<pubDate>Wed, 14 Mar 2018 12:44:45 +0000</pubDate>
		<dc:creator><![CDATA[2282869995]]></dc:creator>
		<guid isPermaLink="false">http://gumx.top/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[<p><a href="http://mp.weixin.qq.com/s/R9UMjxJs8zZVnPO1DaUpuA">原文地址</a></p>

<h3>一、http的无状态性</h3>

<p>http是无状态协议。他不对之前发送的请求和响应进行管理。也就是说，无法根据之前的状态对本次的请求进行处理。教授要求进行登录认证的web应用无法对状态进行管理。那么每次跳转新页面不是再次进行登录就是要在报文中对登录状态进行管理。</p>

<h3>二、Cookie 技术的引入</h3>

<p>如果让服务端全部保存客户端的状态，那么就会成为服务端的负担。保留无状态协议的特征，同时要解决类似的问题，于是引入了cookie技术。cookie是通过在请求和响应的报文中添加cookie信息而控制客户端的登录状态。</p>

<h3>三、基于表单的认证</h3>

<p>目前的用户认证多是基于表单的认证。基于表单的认证，一般都会使用cookie来管理session。基于表单的认证本身是通过服务器的wap应用，将客户端发送过来的用户id和密码，与之前登陆过的信息做匹配来进行认证的。</p>

<p>但是鉴于http是无状态协议，之前已认证的用户状态，无法通过协议层保存下来，既无法实现状态管理，因此即使登用户在继续访问，也无法区分与其他的用户，于是我们会使用cookie来管理session，以弥补http协议中不存在的状态管理功能。</p>

<h3>四、Session存储位置及集群情况下的问题</h3>

<p>Session是存储在Web服务器（例如Tomcat）中的，并针对每个客户端（客户），通过SessionID来区别不同的用户的。Session是以Cookie技术或URL重写来实现，默认以Cookie技术实现，服务端会给这次回话创造一个JSESSIONID的Cookie值。</p>

<p>但是存在一个显著问题就是，在集群模式下如果通过Nginx负载均衡的时候，如果有一个用户登录的时候请求被分配到服务器A上，登录成功后设置的Session就会被存储在A服务器上，但是在服务器B上就没有该用户的Session数据，当用户再一次发起一个请求的时候，此时请求如果被分配到服务器B上，则就不会查询到该用户的登录状态，就会出现登录失败的情况。</p>

<ul>
<li><p>一种解决思路是将多个Web服务器上存储的Session统一存储到某一个存储介质中，保证进集群中的每一台机器都可以看到所有相同的Session数据。这里的同步体现在所有的Session存储在同一存储介质中。</p></li>
<li><p>tomcat容器为我们提供了一个接口，可以让我们实现将Session存储到除了当前服务器之外的其他存储介质上，例如Redies。</p></li>
<li><p>spring session的本质就是通过实现tomcat提供的的接口将session存储到Redis中，已实现Session的同一存储管理。</p></li>
</ul>

<h3>五、小结与需求痛点</h3>

<p>Session和Cookie的目的相同，都是为了解决Http协议的无状态的缺陷，但是完成方法不同，Session是通过Cookie 将SessionID保存的客户端。二将其他的回话消息保存在服务端的Session对象中，于此相对的Cookie则是将所有的用户信息保存在Cookie即客户端，因此这种方式存在一定的安全隐患。但是Session在面对集群问题是的解决方案又略显复杂。因此有没有一种小而轻便的方式来解决我们这种认证需求呢？<strong>那就是JWT了！</strong></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date><![CDATA[2018-03-14 20:44:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-14 12:44:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[http%e7%8a%b6%e6%80%81%e7%ae%a1%e7%90%86%e6%96%b9%e6%a1%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bd%91%e7%bb%9c"><![CDATA[网络]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
